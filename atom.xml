<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[bpgoing的博客]]></title>
  <subtitle><![CDATA[6年+的互联网开发经验]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.zhuxiaowu.com/"/>
  <updated>2016-05-28T08:29:15.000Z</updated>
  <id>http://blog.zhuxiaowu.com/</id>
  
  <author>
    <name><![CDATA[朱晓武]]></name>
    <email><![CDATA[zhuxiaowu365@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[angular-ui-router 嵌套路由]]></title>
    <link href="http://blog.zhuxiaowu.com/2016/05/28/angular-ui-router-simple-learn/"/>
    <id>http://blog.zhuxiaowu.com/2016/05/28/angular-ui-router-simple-learn/</id>
    <published>2016-05-28T08:27:59.000Z</published>
    <updated>2016-05-28T08:29:15.000Z</updated>
    <content type="html"><![CDATA[<p>稍等, 后续</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>稍等, 后续</p>
]]>
    </summary>
    
      <category term="angular-ui-router" scheme="http://blog.zhuxiaowu.com/tags/angular-ui-router/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ionic框架的一些图片扩展]]></title>
    <link href="http://blog.zhuxiaowu.com/2016/03/19/ionic-image-picker/"/>
    <id>http://blog.zhuxiaowu.com/2016/03/19/ionic-image-picker/</id>
    <published>2016-03-19T07:03:37.000Z</published>
    <updated>2016-03-19T07:21:08.000Z</updated>
    <content type="html"><![CDATA[<p>做的这个ionic应用, 主要是图片的展示, 在找插件时发现很少能有合意的, 所以准备项目完成后自己写个好了</p>
<h3 id="u56FE_u7247_u753B_u5ECA_3F"><a href="#u56FE_u7247_u753B_u5ECA_3F" class="headerlink" title="图片画廊?"></a>图片画廊?</h3><p><a href="https://github.com/pedroabreu/ion-gallery" target="_blank" rel="external">https://github.com/pedroabreu/ion-gallery</a></p>
<p>这里主要是图片的modal view跟插件合在了一起</p>
<h3 id="u56FE_u7247_u5F02_u6B65_u52A0_u8F7D"><a href="#u56FE_u7247_u5F02_u6B65_u52A0_u8F7D" class="headerlink" title="图片异步加载"></a>图片异步加载</h3><p>看到过有个ionic-lazy-load-image 但并不好用, 具体为什么没细看，但看到了这个不错</p>
<p><a href="http://www.bennadel.com/blog/2498-lazy-loading-image-with-angularjs.htm" target="_blank" rel="external">http://www.bennadel.com/blog/2498-lazy-loading-image-with-angularjs.htm</a></p>
<h3 id="u672A_u52A0_u8F7D_u65F6_u56FE_u7247_u7684_u5360_u4F4D_u7B26"><a href="#u672A_u52A0_u8F7D_u65F6_u56FE_u7247_u7684_u5360_u4F4D_u7B26" class="headerlink" title="未加载时图片的占位符"></a>未加载时图片的占位符</h3><p><a href="http://maketea.co.uk/2013/05/04/responsive-image-placeholders.html" target="_blank" rel="external">http://maketea.co.uk/2013/05/04/responsive-image-placeholders.html</a></p>
<p>这个挺好的，但是图片做为瀑布流或者尺寸不固定时简单的几个css是不够的，这个应该配合图片的异步加载一起</p>
<h3 id="u8FD8_u6709_u4E9B_u5176_u4ED6_u7684_u4E1C_u897F"><a href="#u8FD8_u6709_u4E9B_u5176_u4ED6_u7684_u4E1C_u897F" class="headerlink" title="还有些其他的东西"></a>还有些其他的东西</h3><p>如何判断一个DOM元素在当前视口中可见？</p>
<p><a href="http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport/7557433#7557433" target="_blank" rel="external">http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport/7557433#7557433</a><br>这个还是不错的</p>
<h4 id="u518D_u6765_u4E2A_u7EA7_u8054_u83DC_u5355_u5427"><a href="#u518D_u6765_u4E2A_u7EA7_u8054_u83DC_u5355_u5427" class="headerlink" title="再来个级联菜单吧"></a>再来个级联菜单吧</h4><p>就叫 cascade-picker<br><a href="https://github.com/minh8023/ionic-citypicker" target="_blank" rel="external">https://github.com/minh8023/ionic-citypicker</a> 这是省市级联菜单, 肯定基于这样的来做, 暂且记录一下。</p>
<p>同时也要参考ionic-datepicker来做, 有modal效果和popup效果才够意思</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>做的这个ionic应用, 主要是图片的展示, 在找插件时发现很少能有合意的, 所以准备项目完成后自己写个好了</p>
<h3 id="u56FE_u7247_u753B_u5ECA_3F"><a href="#u56FE_u7247_u753B_u5ECA_3F" clas]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ionic Hybrid App调用Camera+读取相册照片]]></title>
    <link href="http://blog.zhuxiaowu.com/2016/02/19/ionic-angularjs-cordova-camera-development/"/>
    <id>http://blog.zhuxiaowu.com/2016/02/19/ionic-angularjs-cordova-camera-development/</id>
    <published>2016-02-19T12:56:37.000Z</published>
    <updated>2016-02-24T11:47:09.000Z</updated>
    <content type="html"><![CDATA[<p>前两天把开发环境搭建好了，但是Cordova是基于浏览器内核来渲染UI的(不知道这么说对不对，具体啥样也没去细弄)，不管基不基于浏览器，基于App的功能设计总得有些需要解决的问题，下面列一列，一个一个去解决。</p>
<p>1 首先是授权登陆，服务端已经写好了rest api，授权是基于token认证的</p>
<p>2 第三方授权登陆</p>
<p>3 分享功能, 起码能分享到微信，微博，QQ吧。还在找插件中，没试。</p>
<p>4 Android检查版本更新，自动检查</p>
<p>5 拍照，选取照片，上传服务器</p>
<p>先开始解决Camera 相册 上传滴问题吧，相机效果怎么着也要像这样吧？</p>
<p><img src="/uploads/camera-demo.png" alt="demo"></p>
<p>第一创建个cameraDemo项目</p>
<pre><code>ionic start cameraDemo tabs
</code></pre><p>安装3个插件</p>
<pre><code>cordova plugin add cordova-plugin-camera # 调用相机的
cordova plugin add https://github.com/wymsee/cordova-imagePicker.git # 打开相册的
cordova plugin add cordova-plugin-file-transfer # 文件上传的
</code></pre><p>之后到<a href="http://ngcordova.com/" target="_blank" rel="external">http://ngcordova.com/</a>这里下载ngcordova, 解压后把dist目录的ng-cordova.js 或者 ng-cordova.min.js 拷贝到项目的www/js目录。这是官方安装教程<a href="http://ngcordova.com/docs/install/" target="_blank" rel="external">http://ngcordova.com/docs/install/</a></p>
<p>接着在index.html里引用</p>
<pre><code>&lt;script src=&quot;lib/ngCordova/dist/ng-cordova.js&quot;&gt;&lt;/script&gt; # 这是新添加，在cordova.js之前
&lt;script src=&quot;cordova.js&quot;&gt;&lt;/script&gt;
</code></pre><p>修改www/js/app.js 引入ngCordova模块</p>
<p><img src="/uploads/include-ng-cordova.png" alt="demo"></p>
<p>剩下的代码就不写了，看这里有具体的例子</p>
<p><a href="http://ngcordova.com/docs/plugins/camera/" target="_blank" rel="external">http://ngcordova.com/docs/plugins/camera/</a></p>
<p><a href="http://ngcordova.com/docs/plugins/imagePicker/" target="_blank" rel="external">http://ngcordova.com/docs/plugins/imagePicker/</a></p>
<p><a href="http://ngcordova.com/docs/plugins/fileTransfer/" target="_blank" rel="external">http://ngcordova.com/docs/plugins/fileTransfer/</a></p>
<p>最终结果就是这样</p>
<p><img src="/uploads/camera-xiaoguo.png" alt="demo"></p>
<p>虽然跟文章开始时最终效果差了些，但咱们开局是好的，文章开始时的效果应该需要相机的二次开发，所以路还很长，要学习的还很多呀。</p>
<p>不过网上看到了这个例子<a href="https://davidwalsh.name/browser-camera" target="_blank" rel="external">https://davidwalsh.name/browser-camera</a>，应该可以用HTML5来定制相机界面，但是有很多局限性，像聚焦，前后摄像头，闪光灯开启关闭等等。。。我是没尝试，有愿意试的小伙伴希望给个反馈。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前两天把开发环境搭建好了，但是Cordova是基于浏览器内核来渲染UI的(不知道这么说对不对，具体啥样也没去细弄)，不管基不基于浏览器，基于App的功能设计总得有些需要解决的问题，下面列一列，一个一个去解决。</p>
<p>1 首先是授权登陆，服务端已经写好了rest ap]]>
    </summary>
    
      <category term="App Camera" scheme="http://blog.zhuxiaowu.com/tags/App-Camera/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[angularjs ionic实现用户认证]]></title>
    <link href="http://blog.zhuxiaowu.com/2016/02/16/user-auth-angularjs-ionic/"/>
    <id>http://blog.zhuxiaowu.com/2016/02/16/user-auth-angularjs-ionic/</id>
    <published>2016-02-16T07:15:19.000Z</published>
    <updated>2016-02-24T11:37:58.000Z</updated>
    <content type="html"><![CDATA[<p>年后开始尝试用ionic来做个移动App，之前也列出了需要解决的问题，今天算是把UI都搞的差不多了，接着就把权限认证也搞上吧。<br>一通Google+乱问搜罗到了这篇文章，先不管行不行，直接翻译了再说(按照自己的意思翻译的)，不行咱们再找别的方案。</p>
<p>原文地址 <a href="https://devdactic.com/user-auth-angularjs-ionic/" target="_blank" rel="external">https://devdactic.com/user-auth-angularjs-ionic/</a></p>
<p>原作者说：在Ionic+AngularJS做的Hybrid App中实现登陆和用户认证系统是大家遇到的最难的问题之一，他之前写过一个简单的登陆<a href="https://devdactic.com/simple-login-example-with-ionic-and-angularjs/" target="_blank" rel="external">simple login with Ionic and AngularJS</a>居然是每天访问最多的(反正我没看到，这里是作者写的文章里被浏览最多的)。所以作者又有了奉献精神，当当当，写出了这篇完整的权限认证系统！在此小弟感谢，要不您的文章我还得再花几天时间捣鼓！ O(∩_∩)O</p>
<p>认证系统嘛，从以下三个角度来一一解决</p>
<ol>
<li>用户登陆和会话保持(后端基于token认证)。</li>
<li>基于路由的授权控制</li>
<li>会话失效，重新登陆</li>
</ol>
<p>这里提供了一份完整的源代码 <a href="/uploads/devdactic-authentication.zip" title="原网站下载下来的">点击下载</a>，一个基于Ionic框架开发的，但大多数只是AngularJS逻辑，所以不论你想要用到AngularJS App 还是 Hybrid App都没问题，接着往下看吧。还有需要一个后端程序，这是原作者关于后端写的一篇文章 <a href="https://devdactic.com/restful-api-user-authentication-1/" target="_blank" rel="external">RESTful API User Authentication with Node.js and AngularJS</a>。</p>
<h3 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先创建个Ionic项目，关于Ionic的开发环境可以看<a href="http://blog.zhuxiaowu.com/2016/02/12/ionic-angularjs-cordova-env-development/">Ionic+Angularjs+PhoneGap开发环境搭建</a></p>
<pre><code>$ ionic start devdactic-auth blank
$ cd devdactic-auth
$ bower install angular-mocks --save # 经测试这玩意不用装，没啥用，就是模拟请求的。
</code></pre><p>打开项目，找到<code>www/js</code>目录，创建3个文件，分别是<code>controllers.js</code> <code>services.js</code>和<code>constants.js</code>。</p>
<p>之后在index.html引入</p>
<pre><code>&lt;script src=&quot;js/controllers.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/services.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/constants.js&quot;&gt;&lt;/script&gt;
&lt;!-- 
如果直接源码下载angular-mocks.js
并且放到了www/lib/ionic/js/angular/angular-mocks.js
那么就不用在此引入。
--&gt;
&lt;script src=&quot;lib/angular-mocks/angular-mocks.js&quot;&gt;&lt;/script&gt;
</code></pre><p>还要修改<code>www/js/app.js</code>文件，引入angular-mocks模块</p>
<pre><code>angular.module(&apos;starter&apos;, [&apos;ionic&apos;, &apos;ngMockE2E&apos;])
</code></pre><p>再创建5个HTML文件放到 www/templates目录(没有此目录自行创建)，分别是 <code>login.html</code>, <code>main.html</code>, <code>dashboard.html</code>, <code>public.html</code>, <code>admin.html</code>。</p>
<p>OK，准备工作就这些，下面开始愉(苦)快(逼)的编码吧。</p>
<h3 id="u5728APP_u91CC_u521B_u5EFA_u4E00_u4E9B_u5E38_u91CF"><a href="#u5728APP_u91CC_u521B_u5EFA_u4E00_u4E9B_u5E38_u91CF" class="headerlink" title="在APP里创建一些常量"></a>在APP里创建一些常量</h3><p>在创建route之前，需要先定义一些在全局常量，这样比用事件广播或者字符串定义的角色要简单。 编辑<code>www/js/constants.js</code>文件</p>
<pre><code>angular.module(&apos;starter&apos;)

.constant(&apos;AUTH_EVENTS&apos;, {
    notAuthenticated: &apos;auth-not-authenticated&apos;,
    notAuthorized: &apos;auth-not-authorized&apos;
})

.constant(&apos;USER_ROLES&apos;, {
    admin: &apos;admin_role&apos;,
    public: &apos;public_role&apos;
});
</code></pre><p>很简单，现在我们就可以在程序中使用这些常量了。并且看到了这个 <a href="https://medium.com/opinionated-angularjs/techniques-for-authentication-in-angularjs-applications-7bbf0346acec#.xyr6n5u82" target="_blank" rel="external">AngularJS中的身份验证应用程序的技术</a>, 感谢！</p>
<h3 id="u5F00_u59CB_u521B_u5EFA_u89C6_u56FE"><a href="#u5F00_u59CB_u521B_u5EFA_u89C6_u56FE" class="headerlink" title="开始创建视图"></a>开始创建视图</h3><p>程序包含一个登录页面和3个tab选项的布局，这些tab页都是需要身份验证，所以没登录前不能访问任何tab页面。就算在浏览器里运行，也不能直接通过URL来访问这些tab页面，这样才是确保你应用是最安全的。</p>
<p>编辑<code>www/index.html</code>的body标签</p>
<pre><code>&lt;body ng-app=&quot;starter&quot; ng-controller=&quot;AppCtrl&quot;&gt;
    &lt;ion-nav-bar class=&quot;bar-balanced&quot;&gt;
    &lt;/ion-nav-bar&gt;
    &lt;ion-nav-view&gt;&lt;/ion-nav-view&gt;
&lt;/body&gt;
</code></pre><p>我们有一个导航栏(ion-nav-bar标签)和导航视图(ion-nav-view)元素将显示视图连接到路由，为了让程序尽快运行就先在创建个全部空的controllers。</p>
<p>编辑<code>www/js/controllers.js</code></p>
<pre><code>angular.module(&apos;starter&apos;)

.controller(&apos;AppCtrl&apos;, function() {})
.controller(&apos;LoginCtrl&apos;, function() {})
.controller(&apos;DashCtrl&apos;, function() {});
</code></pre><p>接着是登录页面，就创建两个input+一个登录按钮。</p>
<p>编辑<code>www/templates/login.html</code></p>
<pre><code>&lt;ion-view view-title=&quot;Sign-In&quot; name=&quot;login-view&quot;&gt;
    &lt;ion-content class=&quot;padding&quot;&gt;
        &lt;div class=&quot;list list-inset&quot;&gt;
            &lt;label class=&quot;item item-input&quot;&gt;
                &lt;input type=&quot;text&quot; placeholder=&quot;Username&quot; ng-model=&quot;data.username&quot;&gt;
            &lt;/label&gt;
            &lt;label class=&quot;item item-input&quot;&gt;
                &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; ng-model=&quot;data.password&quot;&gt;
            &lt;/label&gt;
        &lt;/div&gt;
        &lt;button class=&quot;button button-block button-positive&quot; ng-click=&quot;login(data)&quot;&gt;Login&lt;/button&gt;
    &lt;/ion-content&gt;
&lt;/ion-view&gt;
</code></pre><p>下一个是登陆后的抽象视图，用于登录后的选项卡，并负责加载视图(这个只可意会，白话文我不太会讲，可能没太理解，有大神讲的比较清晰的跟俺留个言呗)。</p>
<blockquote>
<p>这里解释一下angular-ui-router的 abstract(抽象视图)属性</p>
<p>我的理解是abstract抽象视图不能直接被激活，但是可以设置为被激活的子节点。</p>
<p>就像你在A页面填入一些内容，但内容太多，有一项需要新打开一个B页面去选择，如果现在直接跳转到B页面，填写完成后再回到A页面，你就会发现一些问题(像A页面原来填写内容没有了)，那么这个时候你需要设置B页面为<code>abstract: ture</code>就不会再存在此问题了。</p>
</blockquote>
<p>编辑<code>www/templates/main.html</code></p>
<pre><code>&lt;ion-view&gt;
    &lt;ion-tabs class=&quot;tabs-icon-top tabs-balanced&quot;&gt;

        &lt;ion-tab title=&quot;Dashboard&quot; icon=&quot;ion-home&quot; href=&quot;#/main/dash&quot;&gt;
            &lt;ion-nav-view name=&quot;dash-tab&quot;&gt;&lt;/ion-nav-view&gt;
        &lt;/ion-tab&gt;

        &lt;ion-tab title=&quot;Public&quot; icon=&quot;ion-earth&quot; href=&quot;#/main/public&quot;&gt;
            &lt;ion-nav-view name=&quot;public-tab&quot;&gt;&lt;/ion-nav-view&gt;
        &lt;/ion-tab&gt;

        &lt;ion-tab title=&quot;Secret&quot; icon=&quot;ion-nuclear&quot; href=&quot;#/main/admin&quot;&gt;
            &lt;ion-nav-view name=&quot;admin-tab&quot;&gt;&lt;/ion-nav-view&gt;
        &lt;/ion-tab&gt;

    &lt;/ion-tabs&gt;
&lt;/ion-view&gt;
</code></pre><p>当用户登陆后，将跳转到Dashboard页面，页面中包含一个提示文字，一个注销按钮和3个其他请求的按钮。现在还不能运行，因为控制器和services.js还没写好(快点呗，真啰嗦，天朝程序猿就喜欢简单粗暴直接的)，但是view写好了，所以我们尽快看下我们程序吧(您也知道要快点了。。)</p>
<p>编辑<code>www/templates/dashboard.html</code></p>
<pre><code>&lt;ion-view view-title=&quot;Dashboard&quot; name=&quot;dashboard-view&quot;&gt;
    &lt;ion-nav-buttons side=&quot;right&quot;&gt;
        &lt;button class=&quot;button icon-left ion-log-out button-stable&quot; ng-click=&quot;logout()&quot;&gt;Logout&lt;/button&gt;
    &lt;/ion-nav-buttons&gt;
    &lt;ion-content class=&quot;padding&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;div class=&quot;col text-center&quot;&gt;
                &lt;h3 class=&quot;title&quot;&gt;Welcome !&lt;/h3&gt;
                This could be your Dashboard.
                &lt;br&gt;&lt;br&gt;&lt;br&gt;
                &lt;button class=&quot;button button-full button-positive&quot; ng-click=&quot;performValidRequest()&quot;&gt;
                    Make Valid Request
                &lt;/button&gt;
                &lt;button class=&quot;button button-full button-energized&quot; ng-click=&quot;performUnauthorizedRequest()&quot;&gt;
                    Make Request for unauthorized resource
                &lt;/button&gt;
                &lt;button class=&quot;button button-full button-assertive&quot; ng-click=&quot;performInvalidRequest()&quot;&gt;
                    Make Request without valid token
                &lt;/button&gt;
                &lt;br&gt;&lt;br&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/ion-content&gt;
&lt;/ion-view&gt;
</code></pre><p>其他两个视图(<code>public.html</code>, <code>admin.html</code>)是基于用于角色保护的，所以视图只包含你看到的。<br>编辑 <code>www/templates/public.html</code></p>
<pre><code>&lt;ion-view view-title=&quot;Public&quot; name=&quot;dashboard-view&quot;&gt;
    &lt;ion-content class=&quot;padding&quot;&gt;
        任何登陆的人都能看到！
    &lt;/ion-content&gt;
&lt;/ion-view&gt;
</code></pre><p>最后是这个<code>www/templates/admin.html</code>，并且只有管理员才能看到！</p>
<pre><code>&lt;ion-view view-title=&quot;Admin&quot; name=&quot;dashboard-view&quot;&gt;
    &lt;ion-content class=&quot;padding&quot;&gt;
        管理员才能看到的地方！
    &lt;/ion-content&gt;
&lt;/ion-view&gt;
</code></pre><p>全部view就这些了，到现在还没啥特别的，就是一般程序。主要还是后面的程序，咱们继续，下面是路由，算是跟程序的一个照面。</p>
<h3 id="u5B9E_u73B0_u57FA_u672C_u8DEF_u7531"><a href="#u5B9E_u73B0_u57FA_u672C_u8DEF_u7531" class="headerlink" title="实现基本路由"></a>实现基本路由</h3><p>这个demo的路由不是很复杂，一个登陆页面，一个有三个选项卡的页面，其中<code>main</code>这个抽象路由是抽象路线的模板，还有3个<code>main.*</code>对应的是3个选项页面。</p>
<p>这里主要介绍一个地方是37-39行，链接管理员选项卡。这里做了权限控制，只有当用户<strong>USER_ROLES.admin</strong>时才可以访问这些页面。现在还不能正常运行，咱们接着往下走。</p>
<p>编辑<code>www/js/app.js</code></p>
<pre><code>.config(function ($stateProvider, $urlRouterProvider, USER_ROLES) {
    $stateProvider
    .state(&apos;login&apos;, {
        url: &apos;/login&apos;,
        templateUrl: &apos;templates/login.html&apos;,
        controller: &apos;LoginCtrl&apos;
    })
    .state(&apos;main&apos;, {
        url: &apos;/&apos;,
        abstract: true,
        templateUrl: &apos;templates/main.html&apos;
    })
    .state(&apos;main.dash&apos;, {
        url: &apos;main/dash&apos;,
        views: {
            &apos;dash-tab&apos;: {
                templateUrl: &apos;templates/dashboard.html&apos;,
                controller: &apos;DashCtrl&apos;
            }
        }
    })
    .state(&apos;main.public&apos;, {
        url: &apos;main/public&apos;,
        views: {
            &apos;public-tab&apos;: {
                templateUrl: &apos;templates/public.html&apos;
            }
        }
    })
    .state(&apos;main.admin&apos;, {
        url: &apos;main/admin&apos;,
        views: {
            &apos;admin-tab&apos;: {
                templateUrl: &apos;templates/admin.html&apos;
            }
        },
        data: {
            authorizedRoles: [USER_ROLES.admin]
        }
    });

    // Thanks to Ben Noblet!
    $urlRouterProvider.otherwise(function ($injector, $location) {
        var $state = $injector.get(&quot;$state&quot;);
        $state.go(&quot;main.dash&quot;);
    });
})
</code></pre><p>现在程序里已经进入了angular-mocks，所以可以添加很多东西到程序。添加以下内容到<code>www/js/app.js</code>，咱们运行看看结果。(译者去掉所有angular-mocks的东西就成功了)</p>
<pre><code>.run(function($httpBackend){
    $httpBackend.whenGET(/templates\/\w+.*/).passThrough();
})
</code></pre><p><img src="/uploads/auth-simple-demo.png" alt="权限认证简单demo" title="auth simple demo"></p>
<h3 id="u540E_u7AEF_u6DFB_u52A0_u7528_u6237_u8BA4_u8BC1_u670D_u52A1"><a href="#u540E_u7AEF_u6DFB_u52A0_u7528_u6237_u8BA4_u8BC1_u670D_u52A1" class="headerlink" title="后端添加用户认证服务"></a>后端添加用户认证服务</h3><p>存储服务端token或者session-id使用localStorage，请求时把token放在http的头<code>$http.defaults.headers.common[&#39;X-Auth-Token&#39;] = &#39;token&#39;</code></p>
<p>编辑<code>services.js</code></p>
<pre><code>angular.module(&apos;starter&apos;)

.service(&apos;AuthService&apos;, function($q, $http, USER_ROLES) {
    var LOCAL_TOKEN_KEY = &apos;&apos;;
    var username = &apos;&apos;;
    var isAuthenticated = false; // 是否已授权
    var role = &apos;&apos;;
    var authToken;

    function loadUserCredentials() {
        var token = window.localStorage.getItem(LOCAL_TOKEN_KEY);
        if (token) {
            useCredentials(token);
        }
    }

    function storeUserCredentials(token) {
        window.localStorage.setItem(LOCAL_TOKEN_KEY, token);
        useCredentials(token);
    }

    function useCredentials(token) {
        username = token.split(&apos;.&apos;)[0];
        isAuthenticated = true;
        authToken = token;

        if (username == &apos;admin&apos;) {
            role = USER_ROLES.admin
        }
        if (username == &apos;user&apos;) {
            role = USER_ROLES.public
        }

        // Set the token as header for your requests!
        $http.defaults.headers.common[&apos;X-Auth-Token&apos;] = token;
    }

    function destroyUserCredentials() {
        authToken = undefined;
        username = &apos;&apos;;
        isAuthenticated = false;
        $http.defaults.headers.common[&apos;X-Auth-Token&apos;] = undefined;
        window.localStorage.removeItem(LOCAL_TOKEN_KEY);
    }

    var login = function(name, pw) {
        return $q(function(resolve, reject) {
            if ((name == &apos;admin&apos; &amp;&amp; pw == &apos;1&apos;) || (name == &apos;user&apos; &amp;&amp; pw == &apos;1&apos;)) {
                // Make a request and receive your auth token from your server
                storeUserCredentials(name + &apos;.yourServerToken&apos;);
                resolve(&apos;Login success.&apos;);
            } else {
                reject(&apos;Login Failed.&apos;);
            }
        });
    };

    var logout = function() {
        destroyUserCredentials();
    };

    var isAuthorized = function(authorizedRoles) {
        if (!angular.isArray(authorizedRoles)) {
            authorizedRoles = [authorizedRoles];
        }
        return (isAuthenticated &amp;&amp; authorizedRoles.indexOf(role) !== -1);
    };

    loadUserCredentials();

    return {
        login: login,
        logout: logout,
        isAuthorized: isAuthorized,
        isAuthenticated: function() {return isAuthenticated;},
        username: function() {return username;},
        role: function() {return role;}
    };
})
</code></pre><p>像之前说的，我们不能检查token是否有效，所以我们设置一个拦截器，当用一个无效的token请求，拦截器会注意到$http响应的错误，并且播放一条消息到app。</p>
<p>所以还要在<code>services.js</code>添加以下内容。</p>
<pre><code>.factory(&apos;AuthInterceptor&apos;, function ($rootScope, $q, AUTH_EVENTS) {
    return {
        responseError: function (response) {
            $rootScope.$broadcast({
                401: AUTH_EVENTS.notAuthenticated,
                403: AUTH_EVENTS.notAuthorized
            }[response.status], response);
            return $q.reject(response);
        }
    };
})

.config(function ($httpProvider) {
    $httpProvider.interceptors.push(&apos;AuthInterceptor&apos;);
});
</code></pre><p>虽然这个请求是全局的配置，但依然需要控制器来配合</p>
<pre><code>.controller(&apos;AppCtrl&apos;, function($scope, $state, $ionicPopup, AuthService, AUTH_EVENTS) {
    $scope.username = AuthService.username();

    $scope.$on(AUTH_EVENTS.notAuthorized, function(event) {
        var alertPopup = $ionicPopup.alert({
            title: &apos;Unauthorized!&apos;,
            template: &apos;You are not allowed to access this resource.&apos;
        });
    });

    $scope.$on(AUTH_EVENTS.notAuthenticated, function(event) {
        AuthService.logout();
        $state.go(&apos;login&apos;);
        var alertPopup = $ionicPopup.alert({
            title: &apos;Session Lost!&apos;,
            template: &apos;Sorry, You have to login again.&apos;
        });
    });

    $scope.setCurrentUsername = function(name) {
        $scope.username = name;
    };
})
</code></pre><p>notAuthorized事件告知用户权限不足,notAuthenticated事件是token过期需要登录等。之后又设置了个当前用户，这可以使用所有的子范围!</p>
<p>之后是LoginCtrl</p>
<pre><code>.controller(&apos;LoginCtrl&apos;, function($scope, $state, $ionicPopup, AuthService) {
    $scope.data = {};

    $scope.login = function(data) {
        AuthService.login(data.username, data.password).then(function(authenticated) {
            $state.go(&apos;main.dash&apos;, {}, {reload: true});
            $scope.setCurrentUsername(data.username);
        }, function(err) {
            var alertPopup = $ionicPopup.alert({
                title: &apos;Login failed!&apos;,
                template: &apos;Please check your credentials!&apos;
            });
        });
    };
})
</code></pre><p>接着是DashCtrl</p>
<pre><code>.controller(&apos;DashCtrl&apos;, function($scope, $state, $http, $ionicPopup, AuthService) {
    $scope.logout = function() {
        AuthService.logout();
        $state.go(&apos;login&apos;);
    };

    $scope.performValidRequest = function() {
        $http.get(&apos;http://localhost:8100/valid&apos;).then(
            function(result) {
                $scope.response = result;
            });
    };

    $scope.performUnauthorizedRequest = function() {
        $http.get(&apos;http://localhost:8100/notauthorized&apos;).then(
            function(result) {
                // No result here..
            }, function(err) {
                $scope.response = err;
            });
    };

    $scope.performInvalidRequest = function() {
        $http.get(&apos;http://localhost:8100/notauthenticated&apos;).then(
            function(result) {
                // No result here..
            }, function(err) {
                $scope.response = err;
            });
    };
});
</code></pre><h3 id="u62E6_u622A_u6240_u6709_u6539_u53D8_u7684_u72B6_u6001"><a href="#u62E6_u622A_u6240_u6709_u6539_u53D8_u7684_u72B6_u6001" class="headerlink" title="拦截所有改变的状态"></a>拦截所有改变的状态</h3><p>现在没有任何检查用户的状态，这就意味着用户可以改变其URL来访问想要访问的页面。这时需要添加路由更改事件.</p>
<p>编辑 app.js 最下方添加</p>
<pre><code>.run(function ($rootScope, $state, AuthService, AUTH_EVENTS) {
    $rootScope.$on(&apos;$stateChangeStart&apos;, function (event,next, nextParams, fromState) {
        if (&apos;data&apos; in next &amp;&amp; &apos;authorizedRoles&apos; in next.data) {
            var authorizedRoles = next.data.authorizedRoles;
            if (!AuthService.isAuthorized(authorizedRoles)) {
                event.preventDefault();
                $state.go($state.current, {}, {reload: true});
                $rootScope.$broadcast(AUTH_EVENTS.notAuthorized);
            }
        }
        if (!AuthService.isAuthenticated()) {
            if (next.name !== &apos;login&apos;) {
                event.preventDefault();
                $state.go(&apos;login&apos;);
            }
        }
    });
});
</code></pre><p>译者试验了，的确很好用，但是有些地方并不合意。待俺先加上后端服务，修改修改再上来更新吧！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>年后开始尝试用ionic来做个移动App，之前也列出了需要解决的问题，今天算是把UI都搞的差不多了，接着就把权限认证也搞上吧。<br>一通Google+乱问搜罗到了这篇文章，先不管行不行，直接翻译了再说(按照自己的意思翻译的)，不行咱们再找别的方案。</p>
<p>原文地址]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ionic+Angularjs+PhoneGap开发环境搭建]]></title>
    <link href="http://blog.zhuxiaowu.com/2016/02/12/ionic-angularjs-cordova-env-development/"/>
    <id>http://blog.zhuxiaowu.com/2016/02/12/ionic-angularjs-cordova-env-development/</id>
    <published>2016-02-12T07:00:35.000Z</published>
    <updated>2016-02-24T11:46:41.000Z</updated>
    <content type="html"><![CDATA[<p>开场前先絮叨絮叨<br>之前做了个关于摄影的产品，自己包揽前后左右端，凡是能不能自己解决的都自己来解决了，自己累够呛，好在是做了出来还学习了不少的经验，这不为了丰富产品，又开始搞起了APP，真是把自己往火坑里推。产品在这里</p>
<p>既然要做APP了，Android和IOS那是一个都少不了，但咱对APP开发的经验完全是零，从头学起似乎不适合我这懒人，又不舍得花钱让别人做(关键没啥必要)，只有在自己有限的知识范围内搜索可用的了。之前看到过PhoneGap和不少前端框架(现在一个找不到了)，觉得现在手机配置都高，用PhoneGap做应该问题不大，于是就开始网上各种Google，最后确定了这个Ionic+Angularjs。好吧，絮叨的也不好玩，写写咋搭建环境吧</p>
<p>本人是Mac OS X 系统，以下全部以Mac为例，其实Ubuntu也都差不多。<br>在安装了Xcode(Ubuntu安装Android开发环境)后</p>
<p>1 安装Homebrew，这玩意类似Ubuntu的 apt-get</p>
<pre><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)&quot;
</code></pre><p>2 安装Nodejs(真是哪都有你)</p>
<pre><code>brew install nodejs
</code></pre><p>3 安装Cordova Ionic</p>
<pre><code>npm install -g cordova ionic
</code></pre><p>完成，就是这么简单，接着创建个简单的项目试试</p>
<pre><code>ionic start demo tabs
</code></pre><p>添加需要生成的应用框架</p>
<pre><code>cd demo
ionic platform add ios
ionic platform add android
</code></pre><p>最后运行</p>
<pre><code>ionic serve # 网页版本开发调试环境
ionic run ios # 运行IOS环境
ionic run android # 运行Android环境
ionic run ios -l -c -s --debug # 这个是啥就看提示吧 ionic run ios --help
</code></pre><p>用ionic开发APP需要学习Angularjs，不知道这几天能不能坚持学下去呐。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开场前先絮叨絮叨<br>之前做了个关于摄影的产品，自己包揽前后左右端，凡是能不能自己解决的都自己来解决了，自己累够呛，好在是做了出来还学习了不少的经验，这不为了丰富产品，又开始搞起了APP，真是把自己往火坑里推。产品在这里</p>
<p>既然要做APP了，Android和I]]>
    </summary>
    
      <category term="Angularjs" scheme="http://blog.zhuxiaowu.com/tags/Angularjs/"/>
    
      <category term="Cordova" scheme="http://blog.zhuxiaowu.com/tags/Cordova/"/>
    
      <category term="Ionic" scheme="http://blog.zhuxiaowu.com/tags/Ionic/"/>
    
      <category term="PhoneGap" scheme="http://blog.zhuxiaowu.com/tags/PhoneGap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个简单的项目架构]]></title>
    <link href="http://blog.zhuxiaowu.com/2015/01/29/a-simple-system-architecture/"/>
    <id>http://blog.zhuxiaowu.com/2015/01/29/a-simple-system-architecture/</id>
    <published>2015-01-29T11:38:17.000Z</published>
    <updated>2016-05-28T08:25:02.000Z</updated>
    <content type="html"><![CDATA[<p>说学习sails好久了, 之所以想学它, 只是因为原来做rails时被它各种蹩脚玩意给折腾的。</p>
<p>有些人很喜欢rails, 开始我也很喜欢, 各种库, 各种支持, 加上优雅的语法。熟悉后就各种烦各种不想用, 这货真是啥玩意都往里加, 啥新东西都想支持, 不再像它刚开始时的那么纯粹, 简便。 啥时候rails的组件能像sails那样醒目, 库能像glup提倡的那样: 每个插件只完成一个功能就好了, 别做万能的Rambo好不！！！</p>
<p>额， 这仅限于4.x及以前版本, 好久没用过了是不是有了变化不知道, 希望能变轻点吧。</p>
<p>说回正题, 最近有个基于web的实验室管理系统项目, 想了想系统的复杂性, 还有管理系统的使用习惯, 准备使用以下架构</p>
<p>关于b/s的管理系统, 可以参考<a href="https://github.com/xufei/blog/blob/master/posts/2014-04-27-%E5%9F%BA%E4%BA%8EAngularJS%E7%9A%84%E4%BC%81%E4%B8%9A%E8%BD%AF%E4%BB%B6%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84.md" target="_blank" rel="external">这篇文章</a>看看</p>
<p>看完文章就该说说架构了, 以前总觉得架构高大上, 现在看也就这样, 适合项目就最好。</p>
<p>前端: bootstrap+angular+jquery+socket.io+gulp</p>
<p>后端: node+sails+mysql(mongodb), 因为没啥访问速度要求, 把默认依赖redis的组件改成mysql(真是没一个框架是满意的)</p>
<p>装上sails后看了看，这货也不是很满意, 库的依赖是grunt管理的, 这个先不管吧。 但是自己又封装了socket.io, 人家已经写这么好了, 你居然又画蛇添足。。悲催！！ 依赖的ejs模板引擎还好, 去掉也方便。再具体的还没看，慢慢完善吧，总比rails好些, 项目结构清晰, 业务复杂后也不是把所有功能集中在model, 还支持websocket。</p>
<p>先想好页面布局, 大概是这样子的, 项目管理系统嘛, 单页面项目没有刷新最实用, angular+angular-ui-router配合简直了(当然还有像<a href="http://cn.vuejs.org/" target="_blank" rel="external">vue.js</a>也不错)。 还有<a href="https://github.com/xufei/ng-control/issues/2" target="_blank" rel="external">这篇文章</a>可参考。</p>
<p>关于angular-ui-router可以单独写篇文章介绍</p>
<p><img src="/uploads/tsdsysglxt.png" alt="页面基本布局"></p>
<p>后续再补</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>说学习sails好久了, 之所以想学它, 只是因为原来做rails时被它各种蹩脚玩意给折腾的。</p>
<p>有些人很喜欢rails, 开始我也很喜欢, 各种库, 各种支持, 加上优雅的语法。熟悉后就各种烦各种不想用, 这货真是啥玩意都往里加, 啥新东西都想支持, 不再像它]]>
    </summary>
    
      <category term="angular" scheme="http://blog.zhuxiaowu.com/tags/angular/"/>
    
      <category term="sails" scheme="http://blog.zhuxiaowu.com/tags/sails/"/>
    
      <category term="language" scheme="http://blog.zhuxiaowu.com/categories/language/"/>
    
  </entry>
  
</feed>
